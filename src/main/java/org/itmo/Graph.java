package org.itmo;

import lombok.RequiredArgsConstructor;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.atomic.AtomicIntegerArray;

class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    // Паралелльный обход мамы
    int parallelBFS(int startVertex) {
        var visited = new AtomicIntegerArray(V);
        visited.set(startVertex, 1);

        Queue<Integer> startFrontier = new ConcurrentLinkedQueue<>();
        startFrontier.add(startVertex);

        var pool = ForkJoinPool.commonPool();
        pool.invoke(new BFSLevelTask(startFrontier, visited));

        return visited.length();
    }

    @RequiredArgsConstructor
    private class BFSLevelTask extends RecursiveAction {
        private final Queue<Integer> frontier;
        private final AtomicIntegerArray visited;

        @Override
        protected void compute() {
            if (frontier.isEmpty()) return;

            Queue<Integer> nextFrontier = new ConcurrentLinkedQueue<>();

            frontier.parallelStream()
                    .flatMap(currentVertex -> adjList[currentVertex].stream())
                    .filter(neighborVertex -> visited.compareAndSet(neighborVertex, 0, 1))
                    .forEach(nextFrontier::add);

            if (!nextFrontier.isEmpty()) {
                var nextLevelTask = new BFSLevelTask(nextFrontier, visited);
                nextLevelTask.fork();
                nextLevelTask.join();
            }
        }
    }

    //Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
